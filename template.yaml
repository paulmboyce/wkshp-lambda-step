AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  step-workshop-m6

  Sample SAM Template for step-workshop-m6
  
Resources:

  # Insert separate app from a Cfn/SAM template:
  Module7App:
    Type: AWS::Serverless::Application
    Properties:
      Location: module_7.yml
  
  InputOutputStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:CreateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:GetLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:UpdateLogDelivery
                Resource: "*"  
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:  
                  - !Join [ ":", [!GetAtt HelloWorldFunction.Arn, "$LATEST"]   ]

 
  
  IOStepFunction:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Logging: 
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CloudWatchLogsLogGroup.Arn
      Type: EXPRESS
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        HelloWorldFunctionArn: !GetAtt HelloWorldFunction.Arn
      Role: !GetAtt InputOutputStepFunctionRole.Arn
#      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html



  CloudWatchLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 5
      LogGroupName: /aws/stepfunctions/IOStepFunction


#  LambdaOnFailDestinationQueue: 
#    Type: AWS::SQS::Queue
#    Properties: 
#      QueueName: "LambdaOnFailDestinationQueue"


  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambdaHandler
      CodeUri: hello-world/
      AutoPublishAlias: live
      Role:
        Fn::GetAtt:
          - HelloWorldFunctionRole
          - Arn
      Runtime: nodejs18.x
      EventInvokeConfig:
#        MaximumEventAgeInSeconds: 600
        MaximumRetryAttempts: 1
#        DestinationConfig:
#          OnFailure:
#            Type: SQS
#            Destination: !GetAtt LambdaOnFailDestinationQueue.Arn
      Timeout: 30
      MemorySize: 128
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts



  HelloWorldFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloWorldFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        # - PolicyName: AWSLambdaWriteToFailQueue
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - sqs:SendMessage
        #         Resource:
        #           - !GetAtt LambdaOnFailDestinationQueue.Arn



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldFunctionRoleArn:
    Description: "Hello Lambda Function ARN"
    Value: !GetAtt HelloWorldFunctionRole.Arn


  HelloWorldFunction:
    Description: "MHello Lambda Function AR"
    Value: !GetAtt HelloWorldFunction.Arn

  IOStepFunctionArn:
    Description: "Stock Trading state machine ARN"
    Value: !Ref IOStepFunction

  InputOutputStepFunctionRoleArn:
    Description: "role for stock trading state machine"
    Value: !GetAtt InputOutputStepFunctionRole.Arn

  # LambdaOnFailDestinationQueueARN:
  #   Description: "ARN for failed lambda queue"
  #   Value: !GetAtt LambdaOnFailDestinationQueue.Arn
    